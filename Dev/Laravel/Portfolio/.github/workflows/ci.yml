name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

jobs:
  frontend-tests:
    name: Frontend (Jest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        env:
          CI: true
        run: npm test -- --ci

  frontend-build:
    name: Frontend (Vite build)
    runs-on: ubuntu-latest
    needs: frontend-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build with Vite
        run: npm run build

      - name: Upload built assets (Laravel Vite -> public/build)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vite-build
          path: |
            public/build
            dist
          if-no-files-found: ignore

  php-laravel:
    name: Backend (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ['8.2', '8.3']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, intl, pdo_sqlite, sqlite3, bcmath, fileinfo, openssl
          coverage: none

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache/files
            vendor
          key: composer-${{ runner.os }}-php${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-php${{ matrix.php }}-

      - name: Install Composer dependencies
        run: |
          composer install --no-interaction --prefer-dist --no-progress

      - name: Prepare environment (.env and key)
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate --force

      - name: Configure SQLite for tests
        run: |
          mkdir -p database
          : > database/database.sqlite
          {
            echo "APP_ENV=testing"
            echo "APP_KEY=${{ secrets.APP_KEY_TESTING || '' }}"
            echo "DB_CONNECTION=sqlite"
            echo "DB_DATABASE=${{ github.workspace }}/database/database.sqlite"
            echo "CACHE_DRIVER=array"
            echo "QUEUE_CONNECTION=sync"
            echo "SESSION_DRIVER=array"
          } > .env.testing

      - name: Optimize config/routes (optional)
        run: |
          php artisan config:clear
          php artisan route:list --quiet

      - name: Run PHP tests if present, otherwise lint PHP files
        shell: bash
        run: |
          if [ -f vendor/bin/phpunit ] || [ -f phpunit.xml ] || [ -f phpunit.xml.dist ]; then
            vendor/bin/phpunit --colors=always
          else
            echo "No PHPUnit config found - running PHP syntax check instead"
            ! find . -type f -name "*.php" -print0 | xargs -0 -n1 -I{} php -l "{}" | grep -v "No syntax errors"
          fi
